@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">NAFSupport</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="navItem px-3">
            <NavLink class="nav-link" href="/dashboard" Match="NavLinkMatch.All">
                Dashboard
            </NavLink>
        </div>
        <div class="navItem px-3">
            <NavLink class="nav-link" href="/alltickets" Match="NavLinkMatch.All">
                All Tickets
            </NavLink>
        </div>
        <div class="navItem px-3">
            <NavLink class="nav-link" href="/users">
                Users
            </NavLink>
        </div>
        <div class="navItem px-3">
            <NavLink class="nav-link" @onclick=@ShowLogoutConfirmation>
                Logout
            </NavLink>
        </div>
    </nav>
</div>
@if(isLogOut)
{
    <div class="confirmation-modal">
        <div class="modal-content">
            <span class="close-button" @onclick="CancelLogout">&times;</span>
            <h3>Logout Confirmation</h3>
            <p>Are you sure you want to logout?</p>
            <div class="button-container">
                <button class="delete-button" @onclick="ConfirmLogout">Logout</button>
                <button class="cancel-button" @onclick="CancelLogout">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private bool collapseNavMenu = true;
    private bool isLogOut = false;
    private string? NavMenuCssClass => collapseNavMenu ? "colla" : null;
    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;
    private string modalDisplay = "none";

    public string? storedEmail;
    private string? storedPassword;

    protected async override void OnInitialized()
    {
        storedEmail = await JS.InvokeAsync<string>("localStorage.getItem", "email");
        storedPassword = await JS.InvokeAsync<string>("localStorage.getItem", "password");
        if (storedEmail == null) NavigationManager.NavigateTo("/");
        base.OnInitialized();
    }

   
    private void ShowLogoutConfirmation()
    {
        isLogOut = true;
        modalDisplay = "block";
    }
    private async void ConfirmLogout()
    {
        modalDisplay = "none"; 
        await JS.InvokeVoidAsync("localStorage.removeItem", "email");
        await JS.InvokeVoidAsync("localStorage.removeItem", "password");
        NavigationManager.NavigateTo("/");
    }


    private void CancelLogout()
    {
        modalDisplay = "none";
        isLogOut = false;
    }

}
